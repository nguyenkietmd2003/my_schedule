  const renderCalendar = () => {
    const daysOfWeek = ["CN", "TH 2", "TH 3", "TH 4", "TH 5", "TH 6", "TH 7"];
    const totalDays = daysInMonth(currentMonth, currentYear);
    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
    const startDay = firstDayOfMonth.getDay();
    const calendarDays = [];

    // Lấy ngày hiện tại
    const today = new Date();
    const todayDate = today.getDate();
    const todayMonth = today.getMonth();
    const todayYear = today.getFullYear();

    // Render tiêu đề các ngày trong tuần
    calendarDays.push(
      ...daysOfWeek.map((day, index) => (
        <div key={`day-${index}`} className="day header-day">
          {day}
        </div>
      ))
    );

    // Các ngày từ tháng trước (ô trống đầu lịch)
    for (let i = startDay; i > 0; i--) {
      const lastMonthDate = new Date(currentYear, currentMonth, 0);
      calendarDays.push(
        <div key={`empty-${i}`} className="day empty">
          {`${lastMonthDate.getDate() - i + 1}/${lastMonthDate.getMonth() + 1}`}
        </div>
      );
    }

    // Các ngày trong tháng hiện tại
    for (let i = 1; i <= totalDays; i++) {
      const currentDate = new Date(currentYear, currentMonth, i);

      // Kiểm tra nếu là ngày hiện tại
      const isToday =
        currentDate.getDate() === todayDate &&
        currentDate.getMonth() === todayMonth &&
        currentDate.getFullYear() === todayYear;

      calendarDays.push(
        <div
          key={currentDate.toISOString()}
          className={`day ${isToday ? "today" : ""}`}
        >
          {currentDate.getDate()}
          {renderSchedules(currentDate)}
        </div>
      );
    }

    // Các ngày từ tháng sau (ô trống cuối lịch)
    const remainingDays = (7 - ((totalDays + startDay) % 7)) % 7;
    for (let i = 1; i <= remainingDays; i++) {
      const nextMonthDate = new Date(currentYear, currentMonth + 1, i);
      calendarDays.push(
        <div key={`next-month-${i}`} className="day empty">
          {`${nextMonthDate.getDate()} thg ${nextMonthDate.getMonth() + 1}`}
        </div>
      );
    }

    return calendarDays;
  };
    const renderSchedules = (date) => {
    // Ngày hiện tại theo định dạng địa phương
    const dateString = date.toLocaleDateString();

    // Kiểm tra xem apiSchedules có phải là một mảng không
    if (!Array.isArray(apiSchedules)) {
      return <div className=""></div>;
    }

    // Hàm định dạng thời gian
    const formatTime = (timeString) => {
      const time = new Date(timeString);
      return time.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });
    };

    // Lọc lịch trình theo ngày
    const daySchedules = apiSchedules.filter((schedule) => {
      const scheduleStartDate = new Date(
        schedule.free_time_start
      ).toLocaleDateString(); // Chuyển đổi ngày bắt đầu
      return scheduleStartDate === dateString; // So sánh ngày
    });

    // Kiểm tra nếu không có lịch trình nào trong ngày
    if (daySchedules.length === 0) {
      return <div className=""></div>;
    }

    // Chọn tối đa 2 lịch trình để hiển thị
    const displaySchedules = daySchedules.slice(0, 2);
    const remainingCount = daySchedules.length - displaySchedules.length; // Tính số lịch trình còn lại

    return (
      <div>
        {displaySchedules.map((schedule) => (
          <div
            className="freetime"
            key={schedule.id}
            onClick={(e) => {
              e.stopPropagation(); // Ngăn chặn sự kiện click từ propagating lên thẻ cha
              handleScheduleClick(schedule); // Gọi hàm xử lý sự kiện click
            }}
          >
            {`${formatTime(schedule.free_time_start)} - ${formatTime(
              schedule.free_time_end
            )}`}
          </div>
        ))}
        {remainingCount > 0 && (
          <div className="schedule">{`Còn ${remainingCount} lịch khác`}</div>
        )}
      </div>
    );
  };
